#!/usr/bin/env python3
"""
PDF Generation Service - Creates comprehensive event plans as PDF documents
"""

import os
import json
from datetime import datetime
from typing import Dict, List, Any
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib.colors import HexColor
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
from reportlab.lib.enums import TA_CENTER, TA_LEFT
from reportlab.lib.utils import ImageReader
import io
import httpx
from PIL import Image as PILImage

class PDFPlanGenerationService:
    """Generates comprehensive event plan PDFs based on user selections"""
    
    def __init__(self):
        self.styles = getSampleStyleSheet()
        self._create_custom_styles()
        print("‚úÖ Initialized PDF Plan Generation Service")
    
    def _create_custom_styles(self):
        """Create custom styles for the PDF"""
        # Title style
        self.styles.add(ParagraphStyle(
            name='EventTitle',
            parent=self.styles['Heading1'],
            fontSize=24,
            textColor=HexColor('#F59E0B'),
            alignment=TA_CENTER,
            spaceAfter=20
        ))
        
        # Section header style
        self.styles.add(ParagraphStyle(
            name='SectionHeader',
            parent=self.styles['Heading2'],
            fontSize=16,
            textColor=HexColor('#059669'),
            spaceBefore=20,
            spaceAfter=10
        ))
        
        # Recommendation item style
        self.styles.add(ParagraphStyle(
            name='RecommendationItem',
            parent=self.styles['Normal'],
            fontSize=12,
            leftIndent=20,
            spaceBefore=8,
            spaceAfter=8
        ))
    
    async def generate_event_plan_pdf(self, event_data: Dict, user_selections: Dict = None) -> bytes:
        """Generate comprehensive event plan PDF"""
        
        # Create PDF buffer
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=letter, rightMargin=72, leftMargin=72, topMargin=72, bottomMargin=18)
        
        # Build PDF content
        story = []
        
        # Title
        title = f"{event_data.get('event_type', 'Event').title()} Plan"
        story.append(Paragraph(title, self.styles['EventTitle']))
        story.append(Spacer(1, 20))
        
        # Event Overview
        story.extend(self._create_event_overview(event_data))
        
        # Recommendations sections
        if user_selections:
            if user_selections.get('music'):
                story.extend(self._create_music_section(user_selections['music']))
            
            if user_selections.get('venues'):
                story.extend(self._create_venues_section(user_selections['venues']))
            
            if user_selections.get('food'):
                story.extend(self._create_food_section(user_selections['food']))
        
        # Timeline and checklist
        story.extend(self._create_timeline_section(event_data))
        story.extend(self._create_checklist_section(event_data))
        
        # Footer
        story.append(Spacer(1, 20))
        story.append(Paragraph(
            f"Generated by Tiles AI Event Planner on {datetime.now().strftime('%B %d, %Y')}",
            self.styles['Normal']
        ))
        
        # Build PDF
        doc.build(story)
        
        # Get PDF bytes
        pdf_bytes = buffer.getvalue()
        buffer.close()
        
        return pdf_bytes
    
    def _create_event_overview(self, event_data: Dict) -> List:
        """Create event overview section"""
        content = []
        
        content.append(Paragraph("Event Overview", self.styles['SectionHeader']))
        
        # Event details table
        details = [
            ["Event Type", event_data.get('event_type', 'Not specified')],
            ["Location", event_data.get('location', 'Not specified')],
            ["Guest Count", str(event_data.get('guest_count', 'Not specified'))],
            ["Budget", event_data.get('budget', 'Not specified')],
            ["Meal Type", event_data.get('meal_type', 'Not specified')],
            ["Dietary Restrictions", event_data.get('dietary_restrictions', 'None')]
        ]
        
        table = Table(details, colWidths=[2*inch, 4*inch])
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (0, -1), HexColor('#F3F4F6')),
            ('TEXTCOLOR', (0, 0), (-1, -1), HexColor('#374151')),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
            ('GRID', (0, 0), (-1, -1), 1, HexColor('#E5E7EB'))
        ]))
        
        content.append(table)
        content.append(Spacer(1, 20))
        
        return content
    
    def _create_music_section(self, music_data: List[Dict]) -> List:
        """Create music recommendations section"""
        content = []
        
        content.append(Paragraph("üéµ Music Recommendations", self.styles['SectionHeader']))
        
        for i, music in enumerate(music_data, 1):
            title = music.get('title', 'Unknown Track')
            artist = music.get('artist', 'Unknown Artist')
            platform = music.get('platform', 'Unknown')
            
            text = f"{i}. <b>{title}</b> by {artist} ({platform})"
            content.append(Paragraph(text, self.styles['RecommendationItem']))
        
        content.append(Spacer(1, 15))
        return content
    
    def _create_venues_section(self, venue_data: List[Dict]) -> List:
        """Create venue recommendations section"""
        content = []
        
        content.append(Paragraph("üèõÔ∏è Venue Recommendations", self.styles['SectionHeader']))
        
        for i, venue in enumerate(venue_data, 1):
            name = venue.get('name', 'Unknown Venue')
            address = venue.get('address', 'Address not available')
            venue_type = venue.get('venue_type', 'venue')
            rating = venue.get('business_rating', 0)
            
            text = f"{i}. <b>{name}</b> ({venue_type.replace('_', ' ').title()})"
            if rating:
                text += f" - Rating: {rating}/5"
            text += f"<br/>{address}"
            
            content.append(Paragraph(text, self.styles['RecommendationItem']))
        
        content.append(Spacer(1, 15))
        return content
    
    def _create_food_section(self, food_data: List[Dict]) -> List:
        """Create food recommendations section"""
        content = []
        
        content.append(Paragraph("üçΩÔ∏è Food Recommendations", self.styles['SectionHeader']))
        
        for i, food in enumerate(food_data, 1):
            name = food.get('name', 'Unknown Food')
            cuisine_type = food.get('cuisine_type', 'Unknown')
            price_range = food.get('price_range', 'Price not available')
            
            text = f"{i}. <b>{name}</b> ({cuisine_type}) - {price_range}"
            if food.get('description'):
                text += f"<br/>{food['description']}"
            
            content.append(Paragraph(text, self.styles['RecommendationItem']))
        
        content.append(Spacer(1, 15))
        return content
    
    def _create_timeline_section(self, event_data: Dict) -> List:
        """Create event timeline section"""
        content = []
        
        content.append(Paragraph("üìÖ Event Timeline", self.styles['SectionHeader']))
        
        # Generate timeline based on event type
        event_type = event_data.get('event_type', 'event')
        timeline = self._generate_timeline_for_event_type(event_type)
        
        for item in timeline:
            content.append(Paragraph(f"‚Ä¢ {item}", self.styles['RecommendationItem']))
        
        content.append(Spacer(1, 15))
        return content
    
    def _create_checklist_section(self, event_data: Dict) -> List:
        """Create event checklist section"""
        content = []
        
        content.append(Paragraph("‚úÖ Event Checklist", self.styles['SectionHeader']))
        
        # Generate checklist based on event type
        event_type = event_data.get('event_type', 'event')
        checklist = self._generate_checklist_for_event_type(event_type)
        
        for item in checklist:
            content.append(Paragraph(f"‚òê {item}", self.styles['RecommendationItem']))
        
        content.append(Spacer(1, 15))
        return content
    
    def _generate_timeline_for_event_type(self, event_type: str) -> List[str]:
        """Generate timeline based on event type"""
        if event_type == 'wedding':
            return [
                "6 months before: Book venue and send save-the-dates",
                "3 months before: Send invitations and finalize catering",
                "1 month before: Confirm all vendors and final guest count",
                "1 week before: Final venue walkthrough and rehearsal",
                "Day of: Setup, ceremony, and reception"
            ]
        elif event_type == 'birthday':
            return [
                "2 weeks before: Send invitations and plan activities",
                "1 week before: Confirm guest count and prepare decorations",
                "2 days before: Shop for food and party supplies",
                "Day of: Setup decorations and prepare food",
                "Party time: Enjoy the celebration!"
            ]
        else:
            return [
                "3 weeks before: Plan and send invitations",
                "1 week before: Confirm attendance and prepare materials",
                "2 days before: Setup venue and arrange catering",
                "Day of: Final preparations and event execution",
                "After: Clean up and follow up with attendees"
            ]
    
    def _generate_checklist_for_event_type(self, event_type: str) -> List[str]:
        """Generate checklist based on event type"""
        if event_type == 'wedding':
            return [
                "Book venue and officiant",
                "Send invitations and track RSVPs",
                "Arrange catering and bar service",
                "Hire photographer and videographer",
                "Plan ceremony and reception music",
                "Coordinate transportation",
                "Prepare wedding favors and decorations",
                "Schedule hair and makeup appointments",
                "Obtain marriage license",
                "Plan honeymoon"
            ]
        elif event_type == 'birthday':
            return [
                "Send invitations to guests",
                "Plan party activities and games",
                "Order or bake birthday cake",
                "Decorate party venue",
                "Prepare party favors",
                "Plan menu and drinks",
                "Setup music and entertainment",
                "Prepare camera for photos",
                "Clean up supplies ready"
            ]
        else:
            return [
                "Send event invitations",
                "Book appropriate venue",
                "Arrange catering or refreshments",
                "Setup necessary equipment",
                "Prepare presentation materials",
                "Coordinate with speakers/presenters",
                "Arrange seating and logistics",
                "Prepare welcome materials",
                "Plan follow-up activities"
            ]

# Global instance
pdf_service = PDFPlanGenerationService()